//  __        ___     _ _       ____            
//  \ \      / / |__ (_) |_ ___| __ )  _____  __
//   \ \ /\ / /| '_ \| | __/ _ \  _ \ / _ \ \/ /
//    \ V  V / | | | | | ||  __/ |_) | (_) >  < 
//     \_/\_/  |_| |_|_|\__\___|____/ \___/_/\_\
//           -A passion project from Joshua Bird
//
//  If you are looking at this right now you are
//  probably trying to cheat in a game. If you
//  do, you will be permanently banned without
//  notice.
var socket = io.connect("https://www.jblrd.com", {
    path: "/V2.0.11/whitebox-websocket/socket.io"
});
socket.on("connected", function() {
    login()
}), $("#backButton").on("click", goBack), $("#sendButton").on("click", sendMessage), $("#toggleBackgroundButton").on("click", toggleBackground), $("#setBackgroundOffsetsButton").on("click", setBackgroundOffsets), $("#deleteAccountButton").on("click", promptDeleteAccount), $("#confirmDeleteAccBtn").on("click", deleteAccount), $("#changeUsernameButton").on("click", promptChangeUsername), $("#confirmChangeUsernameBtn").on("click", changeUsername), $("#messagePageSettingsBtn").on("click", chatSettings), $("#logoutButton").on("click", logout), $("#promptUnfriendFriendBtn").on("click", confirmUnfriendModal), $("#unfriendFriendBtn").on("click", unfriendFriend), $("#userSearchBtn").on("click", searchUsers), $("#scrollDownBtn").on("click", scrollDown), $("#unfriendFriendBtn").on("click", unfriendFriend), $("#lightThemeBtn").on("click", setLightTheme), $("#darkThemeBtn").on("click", setDarkTheme), $("#testThemeUpdateBtn").on("click", updateTestTheme), $("#files").on("change", handleFileSelect);
var backgroundWidth, backgroundHeight, backgroundXOffset, backgroundYOffset, backgroundEnabled, userInputElement = $("#userInput"),
    usersElement = $("#users"),
    aboutButtonElement = $("#aboutButton"),
    backButtonElement = $("#backButton"),
    messagePageElement = $("#messagePage"),
    mainTabs = $("#mainTabs"),
    softwareVersion = chrome.runtime.getManifest().version;
    function formatText(message) {
        format_list = [
            {
                "format": "{u}",
                "result_b": '<span style="text-decoration: underline;">',
                "result_e": '</span>',
                "length": 3,
                "indices": []
            },
            {
                "format": "{red}",
                "result_b": '<span style="color: red">',
                "result_e": '</span>',
                "length": 5,
                "indices": []
            },
            {
                "format": "{blue}",
                "result_b": '<span style="color: blue">',
                "result_e": '</span>',
                "length": 6,
                "indices": []
            },
            {
                "format": "{purp}",
                "result_b": '<span style="color: purple">',
                "result_e": '</span>',
                "length": 6,
                "indices": []
            },
            {
                "format": "{brow}",
                "result_b": '<span style="color: brown">',
                "result_e": '</span>',
                "length": 6,
                "indices": []
            },
            {
                "format": "{oran}",
                "result_b": '<span style="color: orange">',
                "result_e": '</span>',
                "length": 6,
                "indices": []
            },
            {
                "format": "{gree}",
                "result_b": '<span style="color: green">',
                "result_e": '</span>',
                "length": 6,
                "indices": []
            },
            {
                "format": "{yell}",
                "result_b": '<span style="color: yellow">',
                "result_e": '</span>',
                "length": 6,
                "indices": []
            },
            {
                "format": "{big}",
                "result_b": '<span style="font-size: 6em;">',
                "result_e": '</span>',
                "length": 5,
                "indices": []
            },
            {
                "format": "*",
                "result_b": '<b>',
                "result_e": '</b>',
                "length": 1,
                "indices": []
            },
            {
                "format": "_",
                "result_b": '<i>',
                "result_e": '</i>',
                "length": 1,
                "indices": []
            },
        ]
        var msg_list = message.split(" ");
        var linkList = [];
        for (x = 0; x < msg_list.length; x++) {
            if (msg_list[x].startsWith("https://") || msg_list[x].startsWith("http://") || msg_list[x].startsWith("file://") || msg_list[x].startsWith("www.")) {
                linkList.push(msg_list[x]);
                msg_list[x] = "";
            }
        }
        for (m = 0; m < msg_list.length; m++) {
            for (x = 0; x < format_list.length; x++) {
                for (i = 0; i <= msg_list[m].length - format_list[x]['length']; i++) {
                    if (msg_list[m].substring(i, i+format_list[x]['length']) == format_list[x]['format']) {     
                        format_list[x]['indices'].push(i);
                    }
                }
                while (true) {        
                    if (format_list[x]['indices'].length <= 1) {
                        break;
                    }
                    
                    msg_list[m] = msg_list[m].replace(format_list[x]['format'], format_list[x]['result_b']);
                    msg_list[m] = msg_list[m].replace(format_list[x]['format'], format_list[x]['result_e']);
                    format_list[x]['indices'].splice(0, 2);
                }
            }
        }
        message = "";
        for (x = 0; x < msg_list.length; x++) {
            if (msg_list[x] == "") {
                msg_list[x] = linkList.pop(0);
            }
            message += " " + msg_list[x];
        }
        if (message.startsWith("/shrug")) {
            message = message.replace("/shrug", "");
            message = message + " \u{AF}\\_(\u{30C4})_/\u{AF}";
        }
        message = message.trim();
        
        return message;
    }
$("#aboutPageSoftwareVersion").text("Version: " + softwareVersion), hideEverything(), mainTabs.show(), aboutButtonElement.show();
var previousPage, username, userData, users, clickedName, xSlider = document.getElementById("xBackground"),
    ySlider = document.getElementById("yBackground");
xSlider.onchange = changeBackgroundPos, ySlider.onchange = changeBackgroundPos, setInterval(refreshBackground, 1e3), setInterval(checkConnection, 5e3), chrome.storage.local.get(["chats"], function(e) {
    void 0 != e.chats && e.chats.length && refreshChats(e.chats)
}), chrome.storage.local.get(["theme"], function(e) {
    "light" === e.theme ? setLightTheme() : "dark" === e.theme ? setDarkTheme() : null != e.theme && setCustomTheme(e.theme)
}), chrome.storage.local.get(["backgroundEnabled"], function(e) {
    e[!1] ? (chrome.storage.local.set({
        backgroundEnabled: !1
    }), backgroundEnabled = !1) : e.backgroundEnabled ? (backgroundEnabled = !0, setLightTheme(), chrome.storage.local.get(["backgroundXOffset"], function(e) {
        backgroundXOffset = e.backgroundXOffset, chrome.storage.local.get(["backgroundYOffset"], function(e) {
            backgroundYOffset = e.backgroundYOffset, chrome.tabs.captureVisibleTab(function(e) {
                document.body.style.backgroundImage = "url(" + e + ")";
                var t = new Image;
                t.src = e, t.onload = function() {
                    backgroundWidth = parseInt(this.width), backgroundHeight = parseInt(this.height), document.body.style.backgroundPosition = backgroundXOffset + "px " + backgroundYOffset + "px", xSlider.value = (backgroundXOffset + backgroundWidth - 100) % 600, ySlider.value = (backgroundYOffset + 300) % 600
                }
            })
        })
    })) : (backgroundEnabled = !1, xSlider.disabled = !0, ySlider.disabled = !0, $("#setBackgroundOffsetsButton").toggleClass("disabled", !0))
});
var numOfFriendRequests, friends, groups, userId, idleInterval, clickedChat = {},
    randomKey = "not used",
    timeUntilNewHeader = 600,
    messages = [],
    messageBufferDistance = 0,
    maxUsernameLength = 25;

function hideEverything() {
    userInputElement.hide(), messagePageElement.hide(), aboutButtonElement.show(), backButtonElement.hide(), mainTabs.hide()
}

function getCookies(e, t, a) {
    chrome.cookies.get({
        url: e,
        name: t
    }, function(e) {
        a && a(e.value)
    })
}

function setLightTheme() {
    less.modifyVars({
        "@theme": "light"
    }), chrome.storage.local.set({
        theme: "light"
    })
}

function setDarkTheme() {
    less.modifyVars({
        "@theme": "dark"
    }), chrome.storage.local.set({
        theme: "dark"
    })
}

function setCustomTheme(e) {
    $("#customThemePromptModal").modal("hide"), chrome.storage.local.get(["customThemes"], function(t) {
        var a = e + "-customTheme",
            n = t.customThemes[a].theme1,
            r = t.customThemes[a].theme2,
            o = t.customThemes[a].theme3,
            s = t.customThemes[a].theme4,
            c = t.customThemes[a].theme5,
            l = t.customThemes[a].theme6;
        less.modifyVars({
            "@theme": "custom",
            "@theme1": n,
            "@theme2": r,
            "@theme3": o,
            "@theme4": s,
            "@theme5": c,
            "@theme6": l
        }), chrome.storage.local.set({
            theme: e
        })
    })
}

function customThemePrompt(e) {
    $("#editCustomThemeBtn").attr("data-shortCustomThemeName", e), $("#setCustomThemeBtn").attr("data-shortCustomThemeName", e), document.getElementById("editCustomThemeBtn").onclick = function() {
        editCustomTheme(this.getAttribute("data-shortCustomThemeName"))
    }, document.getElementById("setCustomThemeBtn").onclick = function() {
        setCustomTheme(this.getAttribute("data-shortCustomThemeName"))
    }, $("#customThemePromptModal").modal("show")
}

function editCustomTheme(e) {
    chrome.storage.local.get(["customThemes"], function(t) {
        var a = e + "-customTheme",
            n = t.customThemes[a].theme1,
            r = t.customThemes[a].theme2,
            o = t.customThemes[a].theme3,
            s = t.customThemes[a].theme4,
            c = t.customThemes[a].theme5,
            l = t.customThemes[a].theme6;
        $("#testTheme1").val(n), $("#testTheme2").val(r), $("#testTheme3").val(o), $("#testTheme4").val(s), $("#testTheme5").val(c), $("#testTheme6").val(l), $("#testThemeName").val(e), $("#cancelTestThemeBtn").text("Delete"), $("#saveTestThemeBtn").text("Set"), $("#cancelTestThemeBtn").on("click", function() {
            deleteCustomTheme(e)
        }), $("#saveTestThemeBtn").on("click", function() {
            saveCustomTheme()
        }), $("#customThemePromptModal").modal("hide"), $("#customThemePromptModal").on("hidden.bs.modal", function(e) {
            $("#customThemeModal").modal("show")
        })
    })
}

function customTheme() {
    $("#cancelTestThemeBtn").text("Cancel"), $("#saveTestThemeBtn").text("Save"), $("#cancelTestThemeBtn").on("click", revertTheme), $("#saveTestThemeBtn").on("click", saveCustomTheme), $("#customThemeModal").modal("show")
}

function updateTestTheme() {
    var e = $("#testTheme1").val(),
        t = $("#testTheme2").val(),
        a = $("#testTheme3").val(),
        n = $("#testTheme4").val(),
        r = $("#testTheme5").val(),
        o = $("#testTheme6").val();
    less.modifyVars({
        "@theme": "custom",
        "@theme1": e,
        "@theme2": t,
        "@theme3": a,
        "@theme4": n,
        "@theme5": r,
        "@theme6": o
    })
}

function revertTheme() {
    chrome.storage.local.get(["theme"], function(e) {
        "light" === e.theme ? setLightTheme() : "dark" === e.theme ? setDarkTheme() : null != e.theme && setCustomTheme(e.theme)
    })
}

function saveCustomTheme() {
    var e = $("#testThemeName").val() + "-customTheme",
        t = $("#testTheme1").val(),
        a = $("#testTheme2").val(),
        n = $("#testTheme3").val(),
        r = $("#testTheme4").val(),
        o = $("#testTheme5").val(),
        s = $("#testTheme6").val();
    return "" == e ? ($("#customThemeModal").modal("hide"), $("#alertMsg").text("You didnt enter a name"), void $("#alertModal").modal("show")) : "" == t || "" == a || "" == n || "" == r || "" == o || "" == s ? ($("#customThemeModal").modal("hide"), $("#alertMsg").text("You didnt enter a color"), void $("#alertModal").modal("show")) : void chrome.storage.local.get(["customThemes"], function(c) {
        var l = {};
        "object" != typeof c.customThemes ? (l[e] = {
            theme1: t,
            theme2: a,
            theme3: n,
            theme4: r,
            theme5: o,
            theme6: s
        }, chrome.storage.local.set({
            customThemes: l
        }), $("#customThemeModal").modal("hide"), $("#alertMsg").text("Theme saved successfully"), $("#alertModal").modal("show")) : (delete(l = c.customThemes)[e], l[e] = {
            theme1: t,
            theme2: a,
            theme3: n,
            theme4: r,
            theme5: o,
            theme6: s
        }, chrome.storage.local.set({
            customThemes: l
        }), $("#customThemeModal").modal("hide"), $("#alertMsg").text("Theme saved successfully"), $("#alertModal").modal("show")), refreshSettingsPage(), shortCustomThemeName = e.substring(0, e.length - 12), setCustomTheme(shortCustomThemeName)
    })
}

function deleteCustomTheme(e) {
    chrome.storage.local.get(["customThemes"], function(t) {
        customThemes = t.customThemes, delete customThemes[e + "-customTheme"], chrome.storage.local.set({
            customThemes: customThemes
        }), $("#alertMsg").text("Custom theme deleted successfully"), $("#alertModal").modal("show"), refreshSettingsPage(), setDarkTheme()
    })
}

function login() {
    chrome.storage.sync.get(["randomKey", "whiteboxId", "whiteboxUsername"], function(e) {
        "randomKey" in e && null != e.randomKey && (hideEverything(), userInputElement.show(), aboutButtonElement.show(), $("#create-account-tab").tab("show"), $("#create-account-username").val(e.whiteboxUsername), $("#create-account-username").attr("disabled", "disabled"), $("#alertMsg").html("<b>Please enter email and password - friends and chats will not be lost.</b> <br><br><small>Dont worry, i cant see your passwords, they salted, hashed and sent over a secure ssl encrypted connection <br>-JB</small>"), $("#alertModal").modal("show"))
    }), chrome.storage.local.get(["whiteboxId", "whiteboxUsername", "validator"], function(e) {
        if ("whiteboxUsername" in e && "whiteboxId" in e && "validator" in e && null !== e.whiteboxId && null !== e.whiteboxUsername && null !== e.validator) {
            userId = e.whiteboxId, username = e.whiteboxUsername;
            var t = e.validator;
            socket.emit("autoLogin", {
                userId: userId,
                validator: t,
                softwareVersion: softwareVersion,
                username: username
            })
        } else hideEverything(), userInputElement.show(), aboutButtonElement.show()
    })
}

function logout() {
    chrome.storage.local.get(["validator"], function(e) {
        if (null != e.validator) {
            var t = e.validator;
            socket.emit("logout", {
                username: username,
                validator: t
            })
        }
        chrome.storage.local.clear(), window.close()
    })
}

function refreshSettingsPage() {
    chrome.storage.local.get(["customThemes"], function(e) {
        $("#customThemeDropdown").empty();
        var t = document.createElement("a");
        for (var a in t.classList.add("dropdown-item"), t.classList.add("dropdown-text"), t.innerHTML = "+ New Theme", t.onclick = function() {
                customTheme()
            }, document.getElementById("customThemeDropdown").prepend(t), e.customThemes) shortCustomThemeName = a.substring(0, a.length - 12), (t = document.createElement("a")).classList.add("dropdown-item"), t.classList.add("dropdown-text"), t.innerHTML = shortCustomThemeName, t.onclick = function() {
            customThemePrompt(this.innerHTML)
        }, document.getElementById("customThemeDropdown").prepend(t)
    })
}

function refreshBackground() {
    backgroundEnabled ? chrome.tabs.captureVisibleTab(function(e) {
        document.body.style.backgroundImage = "url(" + e + ")", (new Image).src = e
    }) : document.body.style.backgroundImage = ""
}

function toggleBackground() {
    1 == backgroundEnabled ? (chrome.storage.local.set({
        backgroundEnabled: !1
    }), backgroundEnabled = !1, refreshBackground(), xSlider.disabled = !0, ySlider.disabled = !0, $("#setBackgroundOffsetsButton").toggleClass("disabled", !0)) : (alert("Transparent background is in development and does not work well with high resolution displays. (Until I get a high resolution screen I cant really fix this)"), setLightTheme(), chrome.storage.local.set({
        backgroundEnabled: !0
    }), backgroundEnabled = !0, refreshBackground(), xSlider.disabled = !1, ySlider.disabled = !1, $("#setBackgroundOffsetsButton").toggleClass("disabled", !1), chrome.storage.local.get(["backgroundXOffset"], function(e) {
        backgroundXOffset = e.backgroundXOffset, chrome.storage.local.get(["backgroundYOffset"], function(e) {
            backgroundYOffset = e.backgroundYOffset, chrome.tabs.captureVisibleTab(function(e) {
                document.body.style.backgroundImage = "url(" + e + ")";
                var t = new Image;
                t.src = e, t.onload = function() {
                    backgroundWidth = parseInt(this.width), backgroundHeight = parseInt(this.height), document.body.style.backgroundPosition = backgroundXOffset + "px " + backgroundYOffset + "px", xSlider.value = (backgroundXOffset + backgroundWidth - 100) % 600, ySlider.value = (backgroundYOffset + 300) % 600
                }
            })
        })
    }))
}

function changeBackgroundPos() {
    backgroundXOffset = parseInt(xSlider.value) - backgroundWidth + 100, backgroundYOffset = parseInt(ySlider.value) - 300, document.body.style.backgroundPosition = backgroundXOffset + "px " + backgroundYOffset + "px"
}

function setBackgroundOffsets() {
    chrome.storage.local.set({
        backgroundXOffset: backgroundXOffset
    }), chrome.storage.local.set({
        backgroundYOffset: backgroundYOffset
    })
}

function promptDeleteAccount() {
    $("#confirmDeleteAccModal").modal("show")
}

function deleteAccount() {
    hideEverything(), socket.emit("deleteUser", {
        username: username
    }), socket.disconnect(), aboutButtonElement.show(), chrome.storage.local.clear(), chrome.runtime.sendMessage({
        turnOffNotifications: 1
    }), window.close()
}

function promptChangeUsername() {
    $("#confirmChangeUsernameModal").modal("show")
}

function changeUsername() {
    var e = document.getElementById("changeUsernameInput").value;
    e.length > maxUsernameLength ? (document.getElementById("changeUsernameInput").value = "", document.getElementById("changeUsernameInput").placeholder = "Username too long") : e ? (socket.emit("changeUsername", {
        username: username,
        newUsername: e
    }), $("#confirmChangeUsernameModal").modal("hide"), document.getElementById("changeUsernameInput").value = "") : document.getElementById("changeUsernameInput").placeholder = "Please enter username"
}

function chatSettings() {
    0 == clickedChat.type ? (getDeleteMsg(), $("#friendSettingsModal").modal("show")) : 1 == clickedChat.type && (getDeleteMsg(), $("#groupSettingsModal").modal("show"))
}

function goBack() {
    stoppedTyping(), clickedChat = void 0, hideEverything(), "userInputElement" === previousPage ? userInputElement.show() : (mainTabs.show(), socket.emit("refreshUsers", {
        username: username
    })), aboutButtonElement.show(), backButtonElement.hide(), messages = {}
}

function scrollDown() {
    document.getElementById("messageScroll").scrollTop = messageScroll.scrollHeight
}

function openMessagePage(e, t) {
    ! function a() {
        var n;
        null == friends ? window.setTimeout(a, 50) : (0 == t ? n = friends[e][0] : 1 == t && (n = groups[e][0]), clickedChat = {
            id: e,
            type: t,
            name: n
        }, $("#messageScroll").contents().remove(), $("#messagePageName").text(clickedChat.name), $("#messagePageLastOnline").text(""), hideEverything(), $("#scrollDownBtn").hide(), messagePageElement.show(), aboutButtonElement.show(), backButtonElement.show(), socket.emit("requestMessages", {
            clickedId: e,
            username: username,
            chatType: t
        }), socket.emit("isTyping", {
            chatId: e,
            chatType: t
        }))
    }()
}

function stoppedTyping() {
    socket.emit("stoppedTyping"), clearInterval(idleInterval)
}

function checkIdle() {
    var e = 0;
    idleInterval = setInterval(function() {
        (e += 1) > 29 && (stoppedTyping(), e = 0)
    }, 1e3), $(this).keypress(function(t) {
        e = 0
    })
}

function searchUsers() {
    var e = $("#userSearchInput").val();
    socket.emit("searchUsers", {
        username: username,
        usernameToSearch: e
    })
}

function sendMessage() {
    var e = Math.round(+new Date / 1e3),
        t = document.getElementById("message"),
        a = t.value.replace("\n", "");
    if (t.value = "", "" !== a) {
        a = unescape(encodeURIComponent(a)), messages.push({
            messageId: null,
            senderId: userId,
            message: a,
            timeSent: e,
            confirmed: !1
        }), refreshMessagePage(), messageScroll.scrollTop = messageScroll.scrollHeight;
        var n = clickedChat.id,
            r = clickedChat.name,
            o = clickedChat.type;
        socket.emit("message", {
            username: username,
            message: a,
            receiverId: n,
            receiverName: r,
            chatType: o
        })
    }
}
function handleFileSelect(evt) {
    var $files = $(this).get(0).files;
    var formData = new FormData();
    if ($files[0].type.toLowerCase() == "mov" || $files[0].type.toLowerCase() == "jpg" || $files[0].type.toLowerCase() == "jpeg" || $files[0].type.toLowerCase() == "png" || $files[0].type.toLowerCase() == "gif" || $files[0].type.toLowerCase() == "apng" || $files[0].type.toLowerCase() == "tiff" || $files[0].type.toLowerCase() == "mp4") {
        formData.append("image", $files[0]);
        sendImg(formData);
    } else {
        formData.append("file", $files[0]);
        sendFile(formData);
    }
}

function sendFile(data) {
    var settings = {
        async: false,
        crossDomain: true,
        processData: false,
        contentType: false,
        type: 'POST',
        url: 'https://bayfiles.com/api/upload',
        mimeType: 'multipart/form-data'
    };
    settings.data = data;
    $.ajax(settings).done(function (response) {
        var data = JSON.parse(response);
        var xhr = new XMLHttpRequest();
        xhr.onreadystatechange = process;
        xhr.open("GET", data.data.file.url.short + "/" + data.data.file.metadata.name, true);
        xhr.send();
        function process()
        {
            if (xhr.readyState == 4) {

                // resp now has the text and you can process it.
                // var url1 = xhr.responseText.split('id="download-url"\n                   class="btn btn-primary btn-block"\n                   href="')[1];
                var url1 = xhr.responseText.split('id="download-url"')[1];
                var url2 = url1.split('href="')[1];
                var url = url2.split('">')[0];
                sendCstmMsg("wb-fle://" + url.replace("https://", ""));
            }
        }
    });
}




function sendImg(data) {
    var settings = {
        async: false,
        crossDomain: true,
        processData: false,
        contentType: false,
        type: 'POST',
        url: 'https://api.imgur.com/3/image',
        headers: {
          Authorization: "Client-ID 86dea04cb4927c2",
          Accept: 'application/json'
        },
        mimeType: 'multipart/form-data'
    };
    settings.data = data;
    $.ajax(settings).done(function (response) {
        var data = JSON.parse(response);
        sendCstmMsg("wb-img://" + data.data.link.replace("https://", ""));
    });
}

function sendCstmMsg(message) {
        var e = Math.round(+new Date / 1e3);
        var a = message;
        a = unescape(encodeURIComponent(a)), messages.push({
            messageId: null,
            senderId: userId,
            message: a,
            timeSent: e,
            confirmed: !1
        }), refreshMessagePage(), messageScroll.scrollTop = messageScroll.scrollHeight;
        var n = clickedChat.id,
            r = clickedChat.name,
            o = clickedChat.type;
        socket.emit("message", {
            username: username,
            message: a,
            receiverId: n,
            receiverName: r,
            chatType: o
        })
}

function friendRequest(e) {
    $('#matchingUsers [data-matchinguserid = "' + e + '"]').attr("class", "fas fa-check fa-fw"), socket.emit("friendRequest", {
        requesteeId: e,
        username: username
    })
}

function calcLastOnline(e) {
    var t = Math.round(+new Date / 1e3) - e;
    if (t <= 5) return "now";
    var a = Math.floor(t / 86400);
    t -= 3600 * a * 24;
    var n = Math.floor(t / 3600);
    t -= 3600 * n;
    var r = Math.floor(t / 60);
    return t -= 60 * r, 0 == r && 0 == n && 0 == a ? t + "s" : 0 == n && 0 == a ? r + "m" : 0 == a ? n + "h" : a > 0 ? a + "d" : a > 360 ? "&infin;" : void 0
}

function findLinks(e, divAlign) {
    if (!e.startsWith("wb-img://") && !e.startsWith("wb-fle://")) {
        var exp = /(\b(https?|ftp|file):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/ig;
        var exp2 =/(^|[^\/])(www\.[\S]+(\b|$))/gim;
        e = formatText(e);
        return e.replace(exp, '<a href="$1" target="_blank">$1</a>').replace(exp2, '$1<a href="http://$2" target="_blank">$2</a>');
    } else if (e.startsWith("wb-fle://")) {
        name = e.split("/")[e.split("/").length - 1];
        e = e.replace("wb-fle://", "http://");
        if (name.length > 14) {
            name = name.substring(0, 12) + "...";
        }
        return "<div style='width: 22.5em; height: 5em;'><div style='width: 13em; height: 5em; background-color: #e2e2e2; border-radius: 0.5em; padding: 1em; " + divAlign + "'><img src='empty.png' width='40em' style='float: left; '><p style='padding-top: 0.7em; padding-left: 3em;'><a href='" + e + "' style='float: left;' target='_blank' download>" + name + "</a></p></div></div>";
    } else {
        return "<img src='" + e.replace("wb-img://", "http://") + "' width='200em'>";
    }
}

function refreshMessagePage() {
    var e = document.getElementById("messageScroll");
    e.innerHTML = "";
    for (var t = !1, a = 0; a < messages.length; a++) {
        var divAlign = "float: left;";
        if (userId == messages[a].senderId) {
            divAlign = "float: right;";
        }
        var n, r = findLinks(escapeHtml(decodeURIComponent(escape(messages[a].message))), divAlign),
            o = messages[a].timeSent,
            s = messages[a].senderId,
            c = messages[a].messageId,
            l = messages[a].confirmed,
            i = messages[a].newMessage;
        void 0 === l && (l = !0);
        var d, m, u = 0,
            h = new Date(1e3 * o),
            f = (h.getDay(), h.getHours()),
            g = "0" + h.getMinutes(),
            p = new Date;
        d = f <= 12 ? f + ":" + g.substr(-2) + "am" : f - 12 + ":" + g.substr(-2) + "pm", h.getFullYear() === p.getFullYear() && h.getMonth() === p.getMonth() && h.getDate() === p.getDate() || (d = h.toLocaleString("en-US", {
            month: "short",
            day: "numeric"
        }) + ", " + d), 0 == a || i && !t && 1 == clickedChat.type ? (n = null, u = messages[0].timeSent) : (n = messages[a - 1].senderId, u = messages[a - 1].timeSent);
        var v = document.createElement("div");
        if (0 == s ? (headerText = r, r = "") : s != userId ? (v.classList.add("replyCard"), m = 0 == clickedChat.type ? friends[s][0] : groups[clickedChat.id][3][s].username, headerText = m + " " + d) : (v.classList.add("sendCard"), m = username, headerText = d + " " + m), n != s || u + timeUntilNewHeader < o || 0 == s) {
            var k = document.createElement("h6");
            k.classList.add("message-header"), k.innerHTML = headerText, v.appendChild(k)
        }
        var b = document.createElement("h6");
        if (b.classList.add("message"), b.innerHTML = r, l || b.classList.add("unconfirmed"), i && !t && 1 == clickedChat.type) {
            var T = document.createElement("span");
            T.innerHTML = "new messages";
            var w = document.createElement("div");
            w.classList.add("new-msgs-div"), w.appendChild(T), e.appendChild(w), t = !0
        }
        v.appendChild(b), v.setAttribute("data-messageId", c), e.appendChild(v)
    }
}

function refreshChats(e) {
    for (var t = e[0], a = e[1], n = [], r = 0; r < Object.keys(t).length; r++) n.push([Object.keys(t)[r], 0]);
    for (r = 0; r < Object.keys(a).length; r++) n.push([Object.keys(a)[r], 1]);
    var o = document.getElementById("users"),
        s = n.sort(function(e, n) {
            return (0 == e[1] ? t[e[0]][2] : a[e[0]][2]) - (0 == n[1] ? t[n[0]][2] : a[n[0]][2])
        }).reverse();
    $("#users").empty();
    for (r = 0; r < s.length; r++)
        if (0 == s[r][1]) {
            var c = s[r][0],
                l = t[c][0],
                i = t[c][1],
                d = t[c][2],
                m = (t[c][3], document.createElement("a")),
                u = calcLastOnline(d),
                h = document.createElement("span");
            0 == i ? (h.setAttribute("class", "far fa-comment-alt fa-fw"), u = "Received " + u) : 1 == i ? (h.setAttribute("class", "fas fa-comment-alt fa-fw"), u = "New " + u) : 2 == i ? (h.setAttribute("class", "far fa-arrow-alt-circle-right fa-fw"), u = "Opened " + u) : 3 == i && (h.setAttribute("class", "fas fa-arrow-alt-circle-right fa-fw"), u = "Sent " + u), (b = document.createElement("button")).classList.add("textLink"), b.setAttribute("data-friendId", c), b.onclick = function() {
                openMessagePage(this.getAttribute("data-friendId"), 0)
            }, b.appendChild(h), b.innerHTML += " " + l, m.classList.add("lastOnline"), m.innerHTML = u, (T = document.createElement("td")).appendChild(b);
            var f = document.createElement("button");
            f.classList.add("textLink"), f.setAttribute("data-toggle", "dropdown"), f.innerHTML = "...";
            var g = document.createElement("button");
            g.classList.add("dropdown-item"), g.classList.add("dropdown-text"), g.setAttribute("data-friendId", c), g.onclick = function() {
                deleteMsgAfterModal(this.getAttribute("data-friendId"))
            }, g.innerHTML = "Delete Msg After:";
            var p = document.createElement("button");
            p.classList.add("dropdown-item"), p.classList.add("dropdown-text"), p.setAttribute("data-friendId", c), p.onclick = function() {
                seeFriendsModal(this.getAttribute("data-friendId"))
            }, p.innerHTML = "See Friends";
            var v = document.createElement("div");
            v.classList.add("dropdown-menu"), v.append(g), v.append(p);
            var k = document.createElement("div");
            k.classList.add("dropdown"), k.append(f), k.append(v), document.createElement("td").append(k), (w = document.createElement("td")).align = "right", w.appendChild(m), (y = document.createElement("tr")).appendChild(T), y.appendChild(w), y.setAttribute("data-friendId", c), o.appendChild(y)
        } else if (1 == s[r][1]) {
        var b, T, w, y, E = s[r][0],
            S = a[E][0],
            x = a[E][1];
        d = a[E][2], m = document.createElement("a"), u = calcLastOnline(d), h = document.createElement("span");
        0 == x ? (h.setAttribute("class", "far fa-comment-alt fa-fw"), u = "Received " + u) : 1 == x ? (h.setAttribute("class", "fas fa-comment-alt fa-fw"), u = "New " + u) : 2 == x ? (h.setAttribute("class", "far fa-arrow-alt-circle-right fa-fw"), u = "Opened " + u) : 3 == x && (h.setAttribute("class", "fas fa-arrow-alt-circle-right fa-fw"), u = "Sent " + u), (b = document.createElement("button")).classList.add("textLink"), b.setAttribute("data-groupId", E), b.onclick = function() {
            openMessagePage(this.getAttribute("data-groupId"), 1)
        }, b.appendChild(h), b.innerHTML += " " + S, m.classList.add("lastOnline"), m.innerHTML = u, (T = document.createElement("td")).appendChild(b), (w = document.createElement("td")).align = "right", w.appendChild(m), (y = document.createElement("tr")).appendChild(T), y.appendChild(w), y.setAttribute("data-groupId", E), o.appendChild(y)
    }
}

function getDeleteMsg() {
    var e = clickedChat.id,
        t = clickedChat.type;
    socket.emit("getDeleteMsg", {
        username: username,
        chatId: e,
        chatType: t
    })
}

function confirmUnfriendModal(e) {
    $("#friendSettingsModal").modal("hide"), $("#confirmUnfriendMsg").text("Are you sure you want to unfriend " + clickedChat.name + "?"), $("#confirmUnfriendModal").modal("show")
}

function unfriendFriend() {
    var e = clickedChat.id;
    socket.emit("unfriendFriend", {
        username: username,
        friendId: e
    }), $("tr[data-friendId=" + clickedChat.id + "]").remove(), $("#confirmUnfriendModal").modal("hide"), goBack()
}

function seeFriendsModal(e) {
    socket.emit("seeFriends", {
        username: username,
        friendId: e
    })
}

function getGameHighScores(e) {
    socket.emit("getGameHighScores", {
        username: username,
        gameName: e
    })
}

function gameHighScore(e, t) {
    socket.emit("gameHighScore", {
        username: username,
        gameName: e,
        score: t
    })
}

function checkConnection() {
    socket.connected || login()
}

function escapeHtml(e) {
    return e.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;")
}
$("#message").keyup(function(e) {
        e.preventDefault(), 13 === e.keyCode && $("#sendButton").click()
    }), $("#login-form").submit(function(e) {
        e.preventDefault();
        var t = $("#loginUsername").val(),
            a = $("#loginPassword").val();
        socket.emit("userLogin", {
            username: t,
            password: a,
            softwareVersion: softwareVersion
        })
    }), socket.on("loginReply", function(e) {
        var t = e.status;
        if ("ERROR: validator incorrect" === t) hideEverything(), userInputElement.show(), aboutButtonElement.show(), $("#loginUsername").attr("style", "border-color: red !important;"), $("#loginPassword").val(""), $("#loginPassword").attr("placeholder", "Credentials Incorrect"), $("#loginPassword").attr("style", "border-color: red !important;");
        else if ("OK" === t) {
            hideEverything(), mainTabs.show(), aboutButtonElement.show(), userId = e.userId, username = e.username, null != e.validator && chrome.storage.local.set({
                validator: e.validator
            }), chrome.storage.local.set({
                whiteboxId: userId
            }), chrome.storage.local.set({
                whiteboxUsername: username
            }), chrome.storage.sync.set({
                randomKey: null
            }), socket.emit("refreshUsers", {
                username: username
            })
        }
    }), $("#create-account-form").submit(function(e) {
        e.preventDefault();
        var t = $("#create-account-username").val(),
            a = $("#create-account-email").val(),
            n = $("#create-account-password").val(),
            r = $("#create-account-confirm-password").val();
        t.length > maxUsernameLength ? ($("#create-account-username").val(""), $("#create-account-username").attr("placeholder", "Username too long")) : 0 == t.length ? ($("#create-account-username").val(""), $("#create-account-username").attr("placeholder", "Enter Username")) : 0 == a.length ? ($("#create-account-email").val(""), $("#create-account-email").attr("placeholder", "Enter Email")) : n != r ? ($("#create-account-confirm-password").val(""), $("#create-account-confirm-password").attr("placeholder", "Does not match")) : n.length < 8 ? ($("#create-account-password").val(""), $("#create-account-confirm-password").val(""), $("#create-account-password").attr("placeholder", "Password too short")) : socket.emit("createAccount", {
            username: t,
            email: a,
            password: n,
            softwareVersion: softwareVersion
        })
    }), socket.on("createAccountReply", function(e) {
        if ("OK" === e.status) {
            userId = e.userId, username = e.username;
            var t = e.validator;
            chrome.storage.local.set({
                whiteboxId: userId
            }), chrome.storage.local.set({
                whiteboxUsername: username
            }), chrome.storage.local.set({
                validator: t
            }), chrome.storage.sync.set({
                randomKey: null
            }), chrome.runtime.sendMessage({
                turnOnNotifications: 1
            }), login()
        } else "ERROR: username taken" === e.status && ($("#create-account-username").val(""), $("#create-account-username").attr("placeholder", "Username Taken"), $("#create-account-username").attr("style", "border-color: red !important;"))
    }), $("#friends-tab").on("show.bs.tab", function() {
        socket.emit("refreshUsers", {
            username: username
        })
    }), $("#friend-requests-tab").on("show.bs.tab", function() {
        socket.emit("pendingFriendRequests", {
            username: username
        })
    }), $("#sent-friend-requests-tab").on("show.bs.tab", function() {
        socket.emit("sentFriendRequests", {
            username: username
        })
    }), $("#settings-tab").on("show.bs.tab", function() {
        refreshSettingsPage()
    }), $("#add-friends-tab").on("show.bs.tab", function() {
        socket.emit("searchUsers", {
            username: username,
            usernameToSearch: ""
        })
    }), $("#addFriendToGroupBtn").on("click", function() {
        chrome.storage.local.get(["chats"], function(e) {
            for (var t = e.chats[0], a = e.chats[1], n = a[clickedChat.id][3], r = [], o = 0; o < Object.keys(t).length; o++) r.push([Object.keys(t)[o], 0]);
            for (o = 0; o < Object.keys(a).length; o++) r.push([Object.keys(a)[o], 1]);
            var s = r.sort(function(e, n) {
                return (0 == e[1] ? t[e[0]][2] : a[e[0]][2]) - (0 == n[1] ? t[n[0]][2] : a[n[0]][2])
            }).reverse();
            $("#addFriendToGroupTable").empty();
            for (o = 0; o < s.length; o++)
                if (0 == s[o][1]) {
                    var c = s[o][0],
                        l = t[c][0],
                        i = (t[c][1], t[c][2]),
                        d = (t[c][3], document.createElement("a"), calcLastOnline(i), document.createElement("i"));
                    c in n && 0 != n[c].status ? d.setAttribute("class", "fas fa-check fa-fw") : d.setAttribute("class", "far fa-plus-square fa-fw");
                    var m = document.createElement("button");
                    m.classList.add("textLink"), m.classList.add("addFriendToGroupBtn"), m.setAttribute("data-friendId", c), m.appendChild(d), m.innerHTML += " " + l;
                    var u = document.createElement("td");
                    u.appendChild(m);
                    var h = document.createElement("tr");
                    h.appendChild(u), h.setAttribute("data-friendId", c), document.getElementById("addFriendToGroupTable").appendChild(h)
                } $(".addFriendToGroupBtn").on("click", function() {
                var e = $(this).attr("data-friendId");
                e in n && 0 != n[e].status || (socket.emit("addFriendToGroup", {
                    username: username,
                    groupId: clickedChat.id,
                    friendId: e
                }), $('button[data-friendId="' + e + '"] > i').attr("class", "fas fa-check fa-fw"), socket.emit("refreshUsers", {
                    username: username
                }))
            })
        }), $("#addFriendToGroupModal").modal("show")
    }), $("#seeGroupMembersBtn").on("click", function() {
        var e = groups[clickedChat.id][3];
        $("#seeGroupMembersTable").empty();
        for (var t = 0; t < Object.keys(e).length; t++) {
            var a = Object.keys(e)[t],
                n = e[a].username,
                r = e[a].status,
                o = document.createElement("h6");
            if (o.setAttribute("class", "small-text"), 0 != r) {
                1 == r ? o.innerHTML = "" : 2 == r && (o.innerHTML = "Creator");
                var s = document.createElement("td");
                s.appendChild(o);
                var c = document.createElement("i");
                c.setAttribute("class", "far fa-times-circle"), c.setAttribute("data-memberId", a), c.onclick = function() {
                    u(this.getAttribute("data-memberId"))
                };
                var l = document.createElement("td");
                l.appendChild(c);
                var i = document.createElement("button");
                i.classList.add("textLink"), i.innerHTML += " " + n;
                var d = document.createElement("td");
                d.appendChild(i);
                var m = document.createElement("tr");
                m.appendChild(d), m.appendChild(s), a != userId && 2 == e[userId].status && (m.appendChild(l), m.setAttribute("data-memberId", a)), document.getElementById("seeGroupMembersTable").appendChild(m)
            }
        }

        function u(t) {
            var a = e[t].username;
            socket.emit("removeMemberFromGroup", {
                username: username,
                groupId: clickedChat.id,
                memberId: t,
                memberName: a
            }), socket.emit("refreshUsers", {
                username: username
            }), $("#seeGroupMembersTable>tr[data-memberId='" + t + "']").remove()
        }
        $("#seeGroupMembersModal").modal("show")
    }), $("#leaveGroupBtn").on("click", function() {
        socket.emit("removeMemberFromGroup", {
            username: username,
            groupId: clickedChat.id,
            memberId: memberId,
            memberName: memberName
        }), socket.emit("refreshUsers", {
            username: username
        }), $("#groupSettingsModal").modal("hide"), goBack()
    }), socket.on("changeUsernameConfirm", function(e) {
        $("#alertMsg").text("Username Changed"), $("#alertModal").modal("show"), chrome.storage.local.set({
            whiteboxUsername: e
        }), username = e
    }), $("#messageScroll").on("scroll", function() {
        var e = $(this).scrollTop();
        if (messageScroll.scrollTop != messageScroll.scrollHeight - messageScroll.offsetHeight ? $("#scrollDownBtn").show() : ($("#scrollDownBtn").hide(), $("#scrollDownBtn sup").hide()), e <= messageBufferDistance && 0 != Object.keys(messages).length) {
            var t = Object.keys(messages).length,
                a = clickedChat.type;
            socket.emit("requestMessagesMore", {
                clickedId: clickedChat.id,
                username: username,
                startIndex: t,
                chatType: a
            })
        }
    }), $("#message").focus(function() {
        socket.emit("startedTyping", {
            chatId: clickedChat.id,
            type: clickedChat.type
        }), checkIdle()
    }), $("#message").focusout(function() {
        stoppedTyping()
    }), socket.on("isTyping", function(e) {
        var t = e.chatId,
            a = e.chatType,
            n = e.isTyping,
            r = e.isOnline;
        if (clickedChat.id == t && clickedChat.type == a)
            if (0 == a) n ? $("#messagePageLastOnline").fadeOut(200, function() {
                $(this).text("typing...")
            }).fadeIn(200) : n || $("#messagePageLastOnline").fadeOut(200, function() {
                r ? $("#messagePageLastOnline").text("Last Online: now") : $("#messagePageLastOnline").text("Last Online: " + calcLastOnline(friends[clickedChat.id][3]))
            }).fadeIn(200);
            else if (1 == a) {
            for (var o = "", s = 0; s < n.length; s++) {
                var c = n[s].userId,
                    l = groups[clickedChat.id][3][c].username;
                c != userId && (o += l + " is typing, ")
            }
            0 != o.length && (o = o.substring(0, o.length - 2)), $("#messagePageLastOnline").fadeOut(200, function() {
                $("#messagePageLastOnline").text(o)
            }).fadeIn(200)
        }
    }), $(document).keydown(function(e) {
        if (27 == e.which && $("#messagePage").is(":visible")) e.preventDefault(), $(".modal").modal("hide"), goBack();
        else if ($("#friends").is(":visible")) {
            document.getElementById("friendsSearch").focus()
        }
    }), socket.on("response", function(e) {
        "ERROR: username taken" === e ? (document.getElementById("username").value = "", document.getElementById("username").placeholder = "Username taken", document.getElementById("username").style.borderColor = "red") : "ERROR: key incorrect" === e ? (alert("SERVER ERROR\nERROR: key incorrect"), hideEverything(), aboutButtonElement.show(), chrome.storage.local.clear(), socket.disconnect(), window.close()) : (userId = e, socket.emit("refreshUsers", {
            username: username
        }), hideEverything(), mainTabs.show(), chrome.storage.local.set({
            whiteboxUsername: username
        }), chrome.storage.local.set({
            whiteboxId: userId
        }), chrome.runtime.sendMessage({
            turnOnNotifications: 1
        }))
    }), socket.on("messages", function(e) {
        messages = e[0].reverse(), refreshMessagePage(), document.getElementById("messageScroll").scrollTop = messageScroll.scrollHeight, $(".new-msgs-div")[0] && document.getElementsByClassName("new-msgs-div")[0].scrollIntoView()
    }), socket.on("moreMessages", function(e) {
        messages = e[0].reverse().concat(messages);
        var t = messageScroll.scrollHeight,
            a = $("#messageScroll").scrollTop();
        refreshMessagePage();
        var n = messageScroll.scrollHeight;
        $("#messageScroll").scrollTop(n - t + a)
    }), socket.on("newMessage", function(e) {
        var t = e[0],
            a = e[1],
            n = e[2],
            r = (e[3], e[4]),
            o = e[5];
        if (clickedChat.id == a) {
            messages.push({
                messageId: o,
                senderId: r,
                message: t,
                timeSent: n
            }), messageScroll.scrollTop === messageScroll.scrollHeight - messageScroll.offsetHeight ? (refreshMessagePage(), messageScroll.scrollTop = messageScroll.scrollHeight) : (refreshMessagePage(), $("#scrollDownBtn sup").show()), r = clickedChat.id;
            var s = clickedChat.type;
            socket.emit("receivedMessage", {
                receiverName: username,
                senderId: r,
                chatType: s
            })
        }
    }), socket.on("updatedViewStatus", function(e) {
        var t = e[0],
            a = e[1];
        document.createElement("span");
        0 == a ? $("#" + t + ">span").attr("class", "far fa-comment-alt fa-fw") : 1 == a ? $("#" + t + ">span").attr("class", "fas fa-comment-alt fa-fw") : 2 == a ? $("#" + t + ">span").attr("class", "far fa-arrow-alt-circle-right fa-fw") : 3 == a && $("#" + t + ">span").attr("class", "fas fa-arrow-alt-circle-right fa-fw")
    }), socket.on("messageConfirm", function(e) {
        for (var t = e.message, a = (Math.round(+new Date / 1e3), 0); a < messages.length; a++)
            if (void 0 != messages[a].confirmed && !messages[a].confirmed && t === messages[a].message) {
                messages[a].confirmed = !0;
                break
            } refreshMessagePage()
    }), socket.on("refreshedUsers", function(e) {
        friends = e[0], groups = e[1], chrome.storage.local.set({
            chats: e
        }), refreshChats(e)
    }), socket.on("deleteMsgReply", function(e) {
        var t = e[0];
        e[1];
        0 == clickedChat.type ? $("#deleteMsgSelectFriend").val(t) : 1 == clickedChat.type && $("#deleteMsgSelectGroup").val(t)
    }), $("#deleteMsgSelectFriend").change(function() {
        var e = $("#deleteMsgSelectFriend").val(),
            t = clickedChat.id,
            a = clickedChat.type;
        socket.emit("setDeleteMsg", {
            username: username,
            friendId: t,
            selection: e,
            chatType: a
        })
    }), $("#deleteMsgSelectGroup").change(function() {
        var e = $("#deleteMsgSelectGroup").val();
        socket.emit("setDeleteMsg", {
            username: username,
            friendId: chatId,
            selection: e,
            chatType: chatType
        })
    }), socket.on("unacceptedRequests", function(e) {
        0 != e ? ($("#friend-requests-tab").html("Friend Requests" + ("(" + e + ")").toString().sup()), $("#friend-requests-dropdown").html('<span class="fas fa-ellipsis-h"></span>' + ("(" + e + ")").toString().sup())) : ($("#friend-requests-tab").html("Friend Requests"), $("#friend-requests-dropdown").html('<span class="fas fa-ellipsis-h"></span>'))
    }), socket.on("popup", function(e) {
        $("#alertMsg").text(e), $("#alertModal").modal("show")
    }), socket.on("friendsFriends", function(e) {
        var t = e;
        $("#friendsFriendsTable").empty();
        for (var a = document.getElementById("friendsFriendsTable"), n = 0; n < Object.keys(t).length; n++) {
            var r = Object.keys(t)[n],
                o = t[r],
                s = document.createElement("button");
            s.classList.add("textLink"), s.id = r, s.onclick = function() {
                friendRequest(this.id)
            }, s.innerHTML = '<span class="far fa-plus-square fa-fw" data-matchingUserId="' + r + '""></span> ' + o;
            var c = document.createElement("td");
            c.appendChild(s);
            var l = document.createElement("tr");
            l.appendChild(c), a.appendChild(l)
        }
        $("#friendsFriendsModal").modal("show")
    }), socket.on("searchUsersReply", function(e) {
        var t = e;
        $("#matchingUsers").empty();
        var a = Object.keys(t).sort(function(e, a) {
            return t[a][2] - t[e][2]
        });
        console.log(JSON.stringify(e, null, 2));
        for (var n = 0; n < a.length; n++) {
            var r = a[n],
                o = t[r][0],
                s = t[r][1],
                c = document.getElementById("matchingUsers");
            if (console.log(void 0 != friends && r in friends), !(void 0 != friends && r in friends || r == userId)) {
                var l = document.createElement("button");
                l.classList.add("textLink"), l.id = r, l.onclick = function() {
                    friendRequest(this.id)
                }, l.innerHTML = '<span class="far fa-plus-square fa-fw" data-matchingUserId="' + r + '""></span> ' + o;
                var i = document.createElement("a"),
                    d = calcLastOnline(s);
                i.classList.add("lastOnline"), i.innerHTML = d;
                var m = document.createElement("td");
                m.appendChild(l);
                var u = document.createElement("td");
                u.align = "right", u.appendChild(i);
                var h = document.createElement("tr");
                h.appendChild(m), h.appendChild(u), c.appendChild(h)
            }
        }
    }), socket.on("friendRequests", function(e) {
        var t = e;
        $("#friendRequests").empty();
        for (var a = 0; a < t.length; a++) {
            var n = document.getElementById("friendRequests"),
                r = document.createElement("i");
            r.setAttribute("class", "far fa-times-circle fa-fw mr-1 textLink"), r.setAttribute("data-requesterId", t[a][2]), r.onclick = function() {
                h(this.getAttribute("data-requesterId"))
            };
            var o = document.createElement("i");
            o.setAttribute("class", "fas fa-check fa-fw mr-2 textLink"), o.setAttribute("data-requesterId", t[a][2]), o.onclick = function() {
                u(this.getAttribute("data-requesterId"))
            };
            var s = document.createElement("a");
            s.classList.add("text"), s.innerHTML = t[a][0];
            var c = document.createElement("a"),
                l = calcLastOnline(t[a][1]);
            c.classList.add("lastOnline"), c.innerHTML = l;
            var i = document.createElement("td");
            i.appendChild(r), i.appendChild(o), i.appendChild(s);
            var d = document.createElement("td");
            d.align = "right", d.appendChild(c);
            var m = document.createElement("tr");
            m.appendChild(i), m.appendChild(d), n.appendChild(m)
        }

        function u(e) {
            socket.emit("acceptFriendRequest", {
                requesterId: e,
                username: username
            }), $('i[data-requesterId="' + e + '"]').closest("tr").remove()
        }

        function h(e) {
            socket.emit("declineFriendRequest", {
                requesterId: e,
                username: username
            }), $('i[data-requesterId="' + e + '"]').closest("tr").remove()
        }
    }), socket.on("sentFriendRequests", function(e) {
        var t = e;
        $("#sentFriendRequests").empty();
        for (var a = 0; a < t.length; a++) {
            var n = document.getElementById("sentFriendRequests"),
                r = document.createElement("button");
            r.classList.add("textLink"), r.id = t[a][0], r.innerHTML = t[a][0];
            var o = document.createElement("a"),
                s = calcLastOnline(t[a][1]);
            o.classList.add("lastOnline"), o.innerHTML = s;
            var c = document.createElement("td");
            c.appendChild(r);
            var l = document.createElement("td");
            l.align = "right", l.appendChild(o);
            var i = document.createElement("tr");
            i.appendChild(c), i.appendChild(l), n.appendChild(i)
        }
    }), socket.on("serverMessage", function(e) {
        var t = e[0],
            a = e[1];
        t === softwareVersion && chrome.storage.local.get(["serverMessageReceived"], function(e) {
            e.serverMessageReceived != softwareVersion && ($("#alertMsg").html(a), $("#alertModal").modal("show")), chrome.storage.local.set({
                serverMessageReceived: softwareVersion
            })
        })
    }), socket.on("friendRequestStatus", function(e, t) {
        "OK" === e ? $('span[data-matchinguserid="' + t + '"]').attr("class", "fas fa-check fa-fw") : "ERROR: Already sent request" === e ? ($("#alertMsg").text("You have already sent a friend request to that person"), $("#alertModal").modal("show"), $("#friendsFriendsModal").modal("hide")) : "ERROR: Already friends" === e && ($("#alertMsg").text("You are already friends with that person"), $("#alertModal").modal("show"), $("#matchingUsers > tr > td > #" + t).closest("tr").remove(), $("#friendsFriendsModal").modal("hide"))
    }), socket.on("refreshFriends", function() {
        socket.emit("refreshUsers", {
            username: username
        })
    }), $("#snake-tab").on("show.bs.tab", function() {
        openSnakeTab()
    }), $("#2048-game-tab").on("show.bs.tab", function() {
        open2048Tab()
    }), $("#tetris-tab").on("show.bs.tab", function() {
        openTetrisTab()
    }), socket.on("gameHighscores", function(e) {
        e[0];
        var t = e[1];
        $("#gameHighscoresTable").empty();
        for (var a = Object.keys(t).sort(function(e, a) {
                return t[e] - t[a]
            }).reverse(), n = 0; n < a.length; n++) {
            var r, o = a[n];
            r = o == userId ? username : friends[o][0];
            var s = t[o],
                c = document.createElement("td");
            c.innerHTML = r;
            var l = document.createElement("td");
            l.align = "right", l.innerHTML = s;
            var i = document.createElement("tr");
            i.appendChild(c), i.appendChild(l), $("#gameHighscoresTable").append(i)
        }
        $("#gameHighscoresModal").modal("show")
    }), chrome.permissions.contains({
        origins: ["https://www.jblrd.com/"]
    }, function(e) {
        e || $("#enableNotificationsModal").modal("show")
    }), $("#enableNotificationsBtn").click(function() {
        chrome.permissions.request({
            origins: ["https://www.jblrd.com/"]
        }, function(e) {
            e && $("#enableNotificationsModal").modal("hide")
        })
    }), $(".table-search").on("keyup", function() {
        var e = $(this).val().toLowerCase();
        $(this).closest("table").find("tbody > tr").filter(function() {
            $(this).toggle($(this).text().toLowerCase().indexOf(e) > -1)
        })
    }), $("#make-group-tab").on("show.bs.tab", function() {
        chrome.storage.local.get(["chats"], function(e) {
            for (var a = e.chats[0], n = e.chats[1], r = [], o = 0; o < Object.keys(a).length; o++) r.push([Object.keys(a)[o], 0]);
            for (o = 0; o < Object.keys(n).length; o++) r.push([Object.keys(n)[o], 1]);
            var s = r.sort(function(e, t) {
                return (0 == e[1] ? a[e[0]][2] : n[e[0]][2]) - (0 == t[1] ? a[t[0]][2] : n[t[0]][2])
            }).reverse();
            $("#makeGroupTable").empty();
            for (o = 0; o < s.length; o++)
                if (0 == s[o][1]) {
                    var c = s[o][0],
                        l = a[c][0],
                        i = (a[c][1], a[c][2]),
                        d = (a[c][3], document.createElement("a"), calcLastOnline(i), document.createElement("i"));
                    d.setAttribute("class", "far fa-plus-square fa-fw");
                    var m = document.createElement("button");
                    m.classList.add("textLink"), m.setAttribute("data-friendId", c), m.onclick = function() {
                        t(this.getAttribute("data-friendId"))
                    }, m.appendChild(d), m.innerHTML += " " + l;
                    var u = document.createElement("td");
                    u.appendChild(m);
                    var h = document.createElement("tr");
                    h.appendChild(u), h.setAttribute("data-friendId", c), document.getElementById("makeGroupTable").appendChild(h)
                }
        });
        var e = [];

        function t(t) {
            ($("#makeGroupNextBtn").removeAttr("disabled"), e.includes(t)) ? ($('button[data-friendId="' + t + '"] > i').attr("class", "far fa-plus-square fa-fw"), -1 !== (t = e.indexOf(t)) && e.splice(t, 1), 0 == e.length && $("#makeGroupNextBtn").attr("disabled", !0)) : ($('button[data-friendId="' + t + '"] > i').attr("class", "fas fa-check fa-fw"), e.push(t))
        }
        $("#makeGroupNextBtn").on("click", function() {
            $("#makeGroupModal").modal("show")
        }), $("#makeGroupCreateBtn").click(function() {
            var t = $("#makeGroupName").val();
            0 == t.length ? ($("#makeGroupName").val(""), $("#makeGroupName").attr("placeholder", "Cannot be left empty"), $("#makeGroupName").attr("style", "border-color: red !important;")) : ($("#makeGroupName").attr("placeholder", "Group Name"), $("#makeGroupName").removeAttr("style"), socket.emit("makeGroup", {
                username: username,
                groupName: t,
                groupMembers: e
            }))
        }), socket.on("groupMade", function() {
            $("#makeGroupModal").modal("hide"), $("#friends-tab").tab("show")
        })
    }),
    function() {
        var e = "2048",
            t = "#36393F",
            a = "#DCDDDE",
            n = "#303136",
            r = document.getElementById("2048Canvas"),
            o = r.getContext("2d"),
            s = 80,
            c = 5,
            l = 20,
            i = [],
            d = 0,
            m = [
                [, , , ],
                [, , , ],
                [, , , ],
                [, , , ]
            ],
            u = !1,
            h = !1;

        function f() {
            i = [], chrome.storage.local.get(["2048GameNumbers"], function(e) {
                null != e["2048GameNumbers"] ? (m = e["2048GameNumbers"][0], d = e["2048GameNumbers"][1]) : (d = 0, m = [
                    [, , , ],
                    [, , , ],
                    [, , , ],
                    [, , , ]
                ], k(), k()), p(), w(), document.addEventListener("keydown", v), u = !0
            })
        }

        function g(t) {
            if ("#2048-game" != $('a[data-toggle="tab"].active').attr("href")) return document.removeEventListener("keydown", v), void document.removeEventListener("keydown", g);
            82 == t.keyCode && chrome.storage.local.set({
                "2048GameNumbers": null
            }, function() {
                f()
            }), "Enter" === t.code && getGameHighScores(e)
        }

        function p() {
            o.fillStyle = t, o.fillRect(0, 0, r.width, r.height), o.fillStyle = a, o.font = "Bold 15px Verdana", o.textAlign = "right", o.textBaseline = "bottom", o.fillText("Score: " + d, 350, 15)
        }

        function v(e) {
            var t = e.keyCode,
                n = JSON.stringify(m);
            if (i = [], 37 === t)
                for (var r = 0; r < 4; r++)
                    for (var u = 0; u < 4; u++) {
                        if (null != ($ = m[r][u]))
                            if (0 != u) {
                                var f = (E = T([u, r], "left"))[0],
                                    g = E[1],
                                    v = m[g][f];
                                (S = {}).startRow = r, S.startCol = u, S.startNum = $, S.horizontal = !0, m[r][u] = null, v == $ ? (S.distance = u - f, m[g][f] = 2 * $, d += 2 * $) : null == v ? (S.distance = u - f, m[g][f] = $) : (S.distance = u - f - 1, m[g][f + 1] = $), i.push(S)
                            } else {
                                (S = {}).startRow = r, S.startCol = u, S.startNum = $, S.horizontal = !0, S.distance = 0, i.push(S)
                            }
                    } else if (39 === t)
                        for (r = 0; r < 4; r++)
                            for (u = 3; u >= 0; u--) {
                                if (null != ($ = m[r][u]))
                                    if (3 != u) {
                                        f = (E = T([u, r], "right"))[0], g = E[1], v = m[g][f];
                                        (S = {}).startRow = r, S.startCol = u, S.startNum = $, S.horizontal = !0, m[r][u] = null, v == $ ? (S.distance = u - f, m[g][f] = 2 * $, d += 2 * $) : null == v ? (S.distance = u - f, m[g][f] = $) : (S.distance = u - f + 1, m[g][f - 1] = $), i.push(S)
                                    } else {
                                        (S = {}).startRow = r, S.startCol = u, S.startNum = $, S.horizontal = !0, S.distance = 0, i.push(S)
                                    }
                            } else if (38 === t)
                                for (u = 0; u < 4; u++)
                                    for (r = 0; r < 4; r++) {
                                        if (null != ($ = m[r][u]))
                                            if (0 != r) {
                                                f = (E = T([u, r], "up"))[0], g = E[1], v = m[g][f];
                                                (S = {}).startRow = r, S.startCol = u, S.startNum = $, S.horizontal = !1, m[r][u] = null, v == $ ? (S.distance = r - g, m[g][f] = 2 * $, d += 2 * $) : null == v ? (S.distance = r - g, m[g][f] = $) : (S.distance = r - g - 1, m[g + 1][f] = $), i.push(S)
                                            } else {
                                                (S = {}).startRow = r, S.startCol = u, S.startNum = $, S.horizontal = !0, S.distance = 0, i.push(S)
                                            }
                                    } else if (40 === t)
                                        for (u = 0; u < 4; u++)
                                            for (r = 3; r >= 0; r--) {
                                                var $;
                                                if (null != ($ = m[r][u]))
                                                    if (3 != r) {
                                                        var E;
                                                        f = (E = T([u, r], "down"))[0], g = E[1], v = m[g][f];
                                                        (S = {}).startRow = r, S.startCol = u, S.startNum = $, S.horizontal = !1, m[r][u] = null, v == $ ? (S.distance = r - g, m[g][f] = 2 * $, d += 2 * $) : null == v ? (S.distance = r - g, m[g][f] = $) : (S.distance = r - g + 1, m[g - 1][f] = $), i.push(S)
                                                    } else {
                                                        var S;
                                                        (S = {}).startRow = r, S.startCol = u, S.startNum = $, S.horizontal = !0, S.distance = 0, i.push(S)
                                                    }
                                            }
            n != JSON.stringify(m) && function() {
                var e = 0;
                h = !0;
                var t = setInterval(function() {
                    if (e += .1, p(), e >= .99) h = !1, clearInterval(t), w(), k();
                    else
                        for (var n = 0; n < i.length; n++) {
                            var r, d, m = i[n].distance * e;
                            i[n].horizontal ? (r = c * (i[n].startCol - m) * 2 + (i[n].startCol - m) * s, d = c * i[n].startRow * 2 + i[n].startRow * s + l) : (r = c * i[n].startCol * 2 + i[n].startCol * s, d = c * (i[n].startRow - m) * 2 + (i[n].startRow - m) * s + l);
                            var u = i[n].startNum,
                                f = b(u);
                            o.font = f <= 2 ? "Bold 40px Verdana" : f <= 4 ? "Bold 25px Verdana" : f <= 6 ? "Bold 15px Verdana" : "Bold 12px Verdana", o.fillStyle = y(u), o.roundRect(r, d, s, s, 3).fill(), o.fillStyle = a, o.textAlign = "center", o.textBaseline = "middle", o.fillText(u, r + s / 2, d + s / 2)
                        }
                }, 5)
            }()
        }

        function k() {
            if (!h) {
                for (var n, i, f = [], g = 0; g < 4; g++)
                    for (var p = 0; p < 4; p++) null == m[p][g] && f.push([g, p]);
                if (0 != f.length) {
                    var k = f[Math.floor(Math.random() * f.length)],
                        T = 2 * (n = 1, i = 2, n = Math.ceil(n), i = Math.floor(i), Math.floor(Math.random() * (i - n + 1)) + n);
                    m[k[1]][k[0]] = T,
                        function(n, i, h) {
                            if (!0, !u) return;
                            var f = c * h * 2 + h * s,
                                g = c * i * 2 + i * s + l,
                                p = (b(n), 0),
                                k = setInterval(function() {
                                    (p += .1) > 1 ? (!1, clearInterval(k), function() {
                                        if (!u) return;
                                        for (var n = [], s = 0; s < 4; s++)
                                            for (var c = 0; c < 4; c++) null == m[c][s] && n.push([s, c]);
                                        if (0 == n.length) {
                                            for (var l = !1, i = 0; i < 4; i++)
                                                for (var h = 1; h < 4; h++) m[i][h] == m[i][h - 1] && (l = !0);
                                            for (var h = 0; h < 4; h++)
                                                for (var i = 1; i < 4; i++) m[i][h] == m[i - 1][h] && (l = !0);
                                            !l && (u = !1, document.removeEventListener("keydown", v), chrome.storage.local.set({
                                                "2048GameNumbers": null
                                            }), o.globalAlpha = .75, o.fillStyle = t, o.fillRect(0, 0, r.width, r.height), o.globalAlpha = 1, chrome.storage.local.get(["gameHighScore"], function(t) {
                                                if (o.fillStyle = a, o.textAlign = "center", 0 === Object.keys(t).length) chrome.storage.local.set({
                                                    gameHighScore: {
                                                        2048: d
                                                    }
                                                }), o.font = "20px Verdana", o.fillText("Score: " + d, 175, 130), gameHighScore(e, d);
                                                else if (t.gameHighScore.hasOwnProperty(e))
                                                    if (t.gameHighScore[e] < d) {
                                                        var n = t.gameHighScore;
                                                        n[e] = d, chrome.storage.local.set({
                                                            gameHighScore: n
                                                        }), gameHighScore(e, d), o.font = "20px Verdana", o.fillText("New High Score!: " + d, 175, 130)
                                                    } else {
                                                        var r = t.gameHighScore[e];
                                                        o.font = "20px Verdana", o.fillText("Score: " + d, 175, 130), o.font = "14px Verdana", o.fillText("Highscore: " + r, 175, 152), gameHighScore(e, r)
                                                    }
                                                else {
                                                    var r = t.gameHighScore;
                                                    r[e] = d, chrome.storage.local.set({
                                                        gameHighScore: r
                                                    }), o.font = "20px Verdana", o.fillText("Score: " + d, 175, 130), gameHighScore(e, d)
                                                }
                                                o.font = "14px Verdana", o.fillText("Press R To Restart", 175, 190), o.fillText("Press Enter To View Leaderboard", 175, 206)
                                            }))
                                        }
                                    }()) : (o.fillStyle = y(n), o.roundRect(f + s / 2 * Math.abs(p - 1), g + s / 2 * Math.abs(p - 1), s * p, s * p, 3).fill(), o.font = "Bold " + 40 * p + "px Verdana", o.fillStyle = a, o.textAlign = "center", o.textBaseline = "middle", o.fillText(n, f + s / 2, g + s / 2))
                                }, 5)
                        }(T, k[1], k[0])
                }
                chrome.storage.local.set({
                    "2048GameNumbers": [m, d]
                })
            }
        }

        function b(e) {
            return Math.log(e) * Math.LOG10E + 1 | 0
        }

        function T(e, t) {
            var a = e[0],
                n = e[1];
            if ("left" === t) {
                for (var r = a - 1; r >= 0; r--)
                    if (null != m[n][r]) return [r, n];
                return [0, n]
            }
            if ("right" === t) {
                for (r = a + 1; r < 4; r++)
                    if (null != m[n][r]) return [r, n];
                return [3, n]
            }
            if ("up" === t) {
                for (r = n - 1; r >= 0; r--)
                    if (null != m[r][a]) return [a, r];
                return [a, 0]
            }
            if ("down" === t) {
                for (r = n + 1; r < 4; r++)
                    if (null != m[r][a]) return [a, r];
                return [a, 3]
            }
        }

        function w() {
            p();
            for (var e = 0; e < 4; e++)
                for (var t = 0; t < 4; t++) {
                    var n = c * e * 2 + e * s,
                        r = c * t * 2 + t * s + l,
                        i = m[t][e];
                    if (null != i && void 0 != i) {
                        var d = b(i);
                        o.font = d <= 2 ? "Bold 40px Verdana" : d <= 4 ? "Bold 25px Verdana" : d <= 6 ? "Bold 15px Verdana" : "Bold 12px Verdana", o.fillStyle = y(i), o.roundRect(n, r, s, s, 3).fill(), o.fillStyle = a, o.textAlign = "center", o.textBaseline = "middle", o.fillText(i, n + s / 2, r + s / 2)
                    }
                }
        }

        function y(e) {
            for (var t = 0; 2 != e && (e /= 2, !(++t > 1e3)););
            return percent = t / 15 + .6, percent > 1 && (percent = 1),
                function(e, t) {
                    c1 = n;
                    var a = parseInt(e.slice(1), 16),
                        r = parseInt(c1.slice(1), 16),
                        o = a >> 16,
                        s = a >> 8 & 255,
                        c = 255 & a,
                        l = r >> 16,
                        i = r >> 8 & 255,
                        d = 255 & r;
                    return "#" + (16777216 + 65536 * (Math.round((l - o) * t) + o) + 256 * (Math.round((i - s) * t) + s) + (Math.round((d - c) * t) + c)).toString(16).slice(1)
                }(a, percent)
        }
        window.open2048Tab = function() {
            document.addEventListener("keydown", g), u || chrome.storage.local.get(["theme"], function(e) {
                if ("light" === e.theme) t = "#FFFFFF", a = "#000000", "#495057", n = "#CED4DA", "#CED4DA", "#3B97E0", o.fillStyle = t, o.fillRect(0, 0, r.width, r.height), f();
                else if ("dark" === e.theme) t = "#36393F", a = "#DCDDDE", "#72767E", n = "#303136", "#303136", "#3B97E0", o.fillStyle = t, o.fillRect(0, 0, r.width, r.height), f();
                else if (null != e.theme) {
                    var s = e.theme;
                    chrome.storage.local.get(["customThemes"], function(e) {
                        var c = s + "-customTheme";
                        t = e.customThemes[c].theme1, a = e.customThemes[c].theme2, e.customThemes[c].theme3, n = e.customThemes[c].theme4, e.customThemes[c].theme5, e.customThemes[c].theme6, o.fillStyle = t, o.fillRect(0, 0, r.width, r.height), f()
                    })
                } else o.fillStyle = t, o.fillRect(0, 0, r.width, r.height), f()
            })
        }, CanvasRenderingContext2D.prototype.roundRect = function(e, t, a, n, r) {
            return a < 2 * r && (r = a / 2), n < 2 * r && (r = n / 2), this.beginPath(), this.moveTo(e + r, t), this.arcTo(e + a, t, e + a, t + n, r), this.arcTo(e + a, t + n, e, t + n, r), this.arcTo(e, t + n, e, t, r), this.arcTo(e, t, e + a, t, r), this.closePath(), this
        }
    }(),
    function() {
        // Snake Game
        var game = "snake";
        
        var theme1 = "#36393F";
        var theme2 = "#DCDDDE";
        var theme3 = "#72767E";
        var theme4 = "#303136";
        var theme5 = "#303136";
        var theme6 = "#3B97E0";
        
        var snakeInterval = false;
        
        let BLOCK_SIZE = 14;
        let ADD_LENGTH = 4;
        
        var snake;
        
        let GAME_SPEED = 100;
        let score = 0;
        let changingDirection = false;
        let ateFoodTickLeft = 0;
        let foodX;
        let foodY;
        let dx = BLOCK_SIZE;
        let dy = 0;
        //added variables
        let isE = false;
        let hitWall = false;
        let wallsOn = false;
        //survival mode variables
        let survival = false;
        let growthspeed = 5;
        let timer = growthspeed;
        let SHORTEN_LENGTH = 1;
        let rest = false;
        
        var gameCanvas = document.getElementById("snakeCanvas");
        var ctx = gameCanvas.getContext("2d");
        
        window.openSnakeTab = function(){
            if(snakeInterval){
                clearInterval(snakeInterval);
                snakeInterval = false;
            }
            chrome.storage.local.get(["theme"], function(result) {
                if(result["theme"] === "light"){
                    theme1 = "#FFFFFF";
                    theme2 = "#000000";
                    theme3 = "#495057";
                    theme4 = "#CED4DA";
                    theme5 = "#CED4DA";
                    theme6 = "#3B97E0";
                }
                else if(result["theme"] === "dark"){
                    theme1 = "#36393F";
                    theme2 = "#DCDDDE";
                    theme3 = "#72767E";
                    theme4 = "#303136";
                    theme5 = "#303136";
                    theme6 = "#3B97E0";
                }
                else if(result["theme"] != null){
                    var shortThemeName = result["theme"];
                    chrome.storage.local.get(["customThemes"], function(result) {
                        var themeName = shortThemeName+"-customTheme";
        
                        theme1 = result["customThemes"][themeName]["theme1"];
                        theme2 = result["customThemes"][themeName]["theme2"];
                        theme3 = result["customThemes"][themeName]["theme3"];
                        theme4 = result["customThemes"][themeName]["theme4"];
                        theme5 = result["customThemes"][themeName]["theme5"];
                        theme6 = result["customThemes"][themeName]["theme6"];
                    });
                }
        
        //todo:        chrome.storage.local.remove(["survivalSnake"]);
                
                document.addEventListener("keydown", restartSnake);
                ctx.fillStyle = theme1;
                ctx.strokeStyle = theme3;
                ctx.fillRect(0, 0, gameCanvas.width, gameCanvas.height);
                ctx.strokeRect(0, 0, gameCanvas.width, gameCanvas.height);
                ctx.fillStyle = theme2;
                ctx.textAlign="center"; 
                ctx.font="15px Verdana";
                ctx.fillText("For different speeds,",175,100);
                ctx.fillText("press 1, 2, or 3",175,120);
                ctx.fillText("More importantly, don't press E",175,140);
                ctx.fillText("For survival mode press S",175,160);
                ctx.fillText("To toggle walls, press W",175,180);
                ctx.fillText("Move around using arrow keys",175,200);
            });
        }
        
        function startSnake(){
            snake = [
                {x: 168, y: 140},
                {x: 154, y: 140},
                {x: 140, y: 140},
                {x: 126, y: 140},
                {x: 112, y: 140}
            ];
        
            if(isE){
                snake = [
                //back of ballsac
                {x: 0, y: 168},
                {x: 0, y: 154},
                {x: 14, y: 140},
                {x: 0, y: 126},
                {x: 0, y: 112},
                //right ball
                {x: 14, y: 182},
                {x: 28, y: 194},
                {x: 42, y: 194},
                {x: 56, y: 182},
                {x: 70, y: 168},
                //right shaft wall
                {x: 84, y: 154},
                {x: 98, y: 154},
                {x: 112, y: 154},
                {x: 126, y: 154},
                {x: 140, y: 154},
                {x: 154, y: 154},
                {x: 168, y: 154},
                //left ball
                {x: 14, y: 98},
                {x: 28, y: 84},
                {x: 42, y: 84},
                {x: 56, y: 98},
                {x: 70, y: 112},
                //left shaft wall
                {x: 84, y: 126},
                {x: 98, y: 126},
                {x: 112, y: 126},
                {x: 126, y: 126},
                {x: 140, y: 126},
                {x: 154, y: 126},
                {x: 168, y: 126},
                //bellend
                {x: 154, y: 140},
                {x: 182, y: 140},
                ]
            }
        
        
            createFood();
            runSnake();
            if(!snakeInterval){
                snakeInterval = setInterval(runSnake, GAME_SPEED);
            }
            document.removeEventListener("keydown", restartSnake);
            document.addEventListener("keydown", changeDirection);
        }
        function restartSnake(){
        //reset everything
            survival = false;
            ateFoodTickLeft = 0;
            BLOCK_SIZE = 14;
            ADD_LENGTH = 4;
            isE = false;
            growthspeed = 5;
            timer = growthspeed;
            SHORTEN_LENGTH = 1;
            rest = false;
            score = 0;
            dx = BLOCK_SIZE;
            dy = 0;
            hitWall = false;
            if($('a[data-toggle="tab"].active').attr("href")!="#snake"){
                document.removeEventListener("keydown", restartSnake);
                return
            }
        
            if(event.code==="Digit1"){
                GAME_SPEED = 100;
                startSnake();
            }
            else if(event.code==="Digit2"){
                GAME_SPEED = 75;
                startSnake();
            }
            else if(event.code==="Digit3"){
                if(wallsOn){
                    BLOCK_SIZE = 7;
                    GAME_SPEED = 30;
                }
                else{
                    GAME_SPEED = 50;
                }
                startSnake();
            }
            else if(event.code==="KeyE"){
            GAME_SPEED = 100;
            isE = true;
            score = -6969420;
            startSnake();
        
            }
        
            else if(event.code==="KeyS"){
                ateFoodTickLeft = 10;
                GAME_SPEED = 75;
                ADD_LENGTH = 15;
                survival = true;
                startSnake();
            }
        
            if(event.code==="KeyW"){
                if(wallsOn){
                    wallsOn = false;
                    document.getElementById("snakeCanvasDiv").style.borderColor = theme1;
        
                }
                else{
                    wallsOn = true;
                    document.getElementById("snakeCanvasDiv").style.borderColor = "#ff0000";
        
                }
            }
        
            if(event.code==="Enter"){
                getGameHighScores(game);
            }
        }
        
        /**
         * Main function of the game
         * called repeatedly to advance the game
         */
        function runSnake() {
            // If the game ended return early to stop game
            if (didGameEnd()){
                ctx.globalAlpha = 0.75;
                ctx.fillStyle = theme1;
                ctx.strokeStyle = theme3;
                ctx.fillRect(0, 0, gameCanvas.width, gameCanvas.height);
                ctx.strokeRect(0, 0, gameCanvas.width, gameCanvas.height);
                ctx.globalAlpha = 1;
                highscore();
                document.removeEventListener("keydown", changeDirection);
                document.addEventListener("keydown", restartSnake);
                ctx.fillStyle = theme2;
                ctx.textAlign="center";        
                ctx.font="14px Verdana";
                ctx.fillText("1,2,3, S or E to play again, w to toggle walls.",175,190);
                ctx.fillText("Press Enter To View Leaderboard",175,206);
                clearInterval(snakeInterval);
                snakeInterval = false;
                return
            };
            changingDirection = false;
            clearCanvas();
            drawFood();
            advanceSnake();
            drawSnake();
            if(survival){runSnakeSurvival();}
        }
        
        function highscore(){
            chrome.storage.local.get(["gameHighScore"], function(result) {
                ctx.fillStyle = theme2;
                ctx.textAlign="center";
                if(Object.keys(result).length === 0){
                    if(survival){
                        chrome.storage.local.set({gameHighScore: {"survivalSnake": score}});
                    }
                    else{
                        chrome.storage.local.set({gameHighScore: {"snake": score}});
                        gameHighScore(game, score);
                    }
                    ctx.font="20px Verdana";
                    ctx.fillText("New High Score!: "+score,175,130);
                }
                else if(survival){
                    var highscore = result["gameHighScore"]["survivalSnake"];
                    if(!("survivalSnake" in result["gameHighScore"]) || result["gameHighScore"]["survivalSnake"] < score){ 
                        chrome.storage.local.set({gameHighScore: {"survivalSnake": score}});
                        highscore = score;
                        ctx.font="20px Verdana";
                        ctx.fillText("New High Score!",175,100);
                    }
                    ctx.fillText("Score: "+score,175,130);
                    ctx.font="14px Verdana";
                    ctx.fillText("Highscore: "+ highscore,175,152);
                }
                else if(!result["gameHighScore"].hasOwnProperty(game)){
                    var gameHighscore = result["gameHighScore"];
                    gameHighscore[game] = score;
                    chrome.storage.local.set({gameHighScore: gameHighscore});
                    ctx.font="20px Verdana";
                    ctx.fillText("New High Score!: "+score,175,130);
                    gameHighScore(game, score);
        
                }
                else if(result["gameHighScore"][game] < score){
                    var gameHighScores = result["gameHighScore"];  
                    gameHighScores[game] = score;
                    chrome.storage.local.set({gameHighScore: gameHighScores});
                    gameHighScore(game, score);
                    ctx.font="20px Verdana";
                    ctx.fillText("New High Score!: "+score,175,130);
                }
                else{
                    var gameHighscore = result["gameHighScore"][game];
                    ctx.font="20px Verdana";
                    ctx.fillText("Score: "+score,175,130);
                    ctx.font="14px Verdana";
                    ctx.fillText("Highscore: "+gameHighscore,175,152);
                    gameHighScore(game, gameHighscore);
                }
            });
        
        }
        
        function runSnakeSurvival(){
            score += 1;
                if (score <= 400 && score % 100 == 0){
                    growthspeed -= 1;
                }
                else if (score % 500 == 0){
                    rest = true;
                    growthspeed += 1;
                    ADD_LENGTH += 5;
                }
                else if (score <= 1000 && score % 100 == 0){
                    rest = false;
                    SHORTEN_LENGTH += 1;
                }
                else if (score <= 2000 && score % 100 == 0){
                    rest = false;
                    growthspeed = 0;
                    SHORTEN_LENGTH += 1;
                }
                if (timer == 0 && !rest) {
                    snake.splice(snake.length - SHORTEN_LENGTH,SHORTEN_LENGTH);
                    timer = growthspeed;
                }
                else if (timer >0){
                    timer -= 1;
                }
        }
        
        /**
         * Change the background colour of the canvas to theme1 and
         * draw a border around it
         */
        function clearCanvas() {
            // Select the colour to fill the drawing
            ctx.fillStyle = theme1;
            // Select the colour for the border of the canvas
            ctx.strokeStyle = theme3;
            // Draw a "filled" rectangle to cover the entire canvas
            ctx.fillRect(0, 0, gameCanvas.width, gameCanvas.height);
            // Draw a "border" around the entire canvas
            ctx.strokeRect(0, 0, gameCanvas.width, gameCanvas.height);
            ctx.fillStyle = theme2;
            ctx.font="15px Verdana";
            ctx.fillText(score,320,15);
        }
        /**
         * Draw the food on the canvas
         */
        function drawFood() {
            ctx.fillStyle = theme6;
            ctx.strokeStyle = theme1;
            ctx.fillRect(foodX, foodY, BLOCK_SIZE, BLOCK_SIZE);
            ctx.strokeRect(foodX, foodY, BLOCK_SIZE, BLOCK_SIZE);
        }
        /**
         * Advances the snake by changing the x-coordinates of its parts
         * according to the horizontal velocity and the y-coordinates of its parts
         * according to the vertical veolocity
         */
        function advanceSnake() {
            // Create the new Snake's head
            const head = {x: snake[0].x + dx, y: snake[0].y + dy};
            // Add the new head to the beginning of snake body
            if(isE){
                for (var i = 0; i < snake.length; i++){
                    snake[i].x += dx;
                    snake[i].y += dy;
                }
            }
            else{
                snake.unshift(head);
            }
        
            for (var i = 0; i < snake.length; i++) {
                if(snake[i].x < 0){
                    hitWall = true;
                    if(wallsOn){return}
                    snake[i].x += gameCanvas.width;
                }
                if(snake[i].x > gameCanvas.width - BLOCK_SIZE){
                    hitWall = true;
                    if(wallsOn){return}
                    snake[i].x -= gameCanvas.width;
                }
                if(snake[i].y < 0){
                    hitWall = true;
                    if(wallsOn){return}
                    snake[i].y += gameCanvas.height;
                }
                if(snake[i].y > gameCanvas.height - BLOCK_SIZE){
                    hitWall = true;
                    if(wallsOn){return}
                    snake[i].y -= gameCanvas.height;
                    
                }
            }
        
            const didEatFood = snake[0].x === foodX && snake[0].y === foodY;
            if(isE){
                for (var i = 0; i < snake.length; i++){
                    if(snake[i].x === foodX && snake[i].y === foodY){
                        score += 1;
                        createFood();
                    }
                }
            }
            else if (didEatFood) {
                // Increase score
                score += 1;
                // Generate new food location
                createFood();
                ateFoodTickLeft+=ADD_LENGTH;
            }
            else if(ateFoodTickLeft==0){
                snake.pop();
            }
            else{
                ateFoodTickLeft-=1;
            }
        }
        /**
         * Returns true if the head of the snake touched another part of the game
         * or any of the walls, or for survival mode, if the snake became nonexistent
         */
        function didGameEnd() {
            if (snake.length == 0)return true
            if (hitWall && wallsOn) return true
            for (let i = 4; i < snake.length; i++) {
                if (snake[i].x === snake[0].x && snake[i].y === snake[0].y ) return true
            }
            return false
        }
        /**
         * Generates a random number that is a multiple of BLOCK_SIZE given a minumum
         * and a maximum number
         * @param { number } min - The minimum number the random number can be
         * @param { number } max - The maximum number the random number can be
         */
        function randomTen(min, max) {
            return Math.ceil((Math.random() * (max-min) + min) / BLOCK_SIZE) * BLOCK_SIZE;
        }
        /**
         * Creates random set of coordinates for the snake food.
         */
        function createFood() {
            // Generate a random number the food x-coordinate
            foodX = randomTen(0, gameCanvas.width - BLOCK_SIZE);
            // Generate a random number for the food y-coordinate
            foodY = randomTen(0, gameCanvas.height - BLOCK_SIZE);
            // if the new food location is where the snake currently is, generate a new food location
            snake.forEach(function isFoodOnSnake(part) {
                const foodIsoNsnake = part.x == foodX && part.y == foodY;
                if (foodIsoNsnake) createFood();
            });
        }
        /**
         * Draws the snake on the canvas
         */
        function drawSnake() {
            // loop through the snake parts drawing each part on the canvas
            snake.forEach(drawSnakePart)
        }
        /**
         * Draws a part of the snake on the canvas
         * @param { object } snakePart - The coordinates where the part should be drawn
         */
        function drawSnakePart(snakePart) {
            // Set the colour of the snake part
            ctx.fillStyle = theme2;
            // Set the border colour of the snake part
            ctx.strokeStyle = theme1;
            ctx.lineWidth=2;
            // Draw a "filled" rectangle to represent the snake part at the coordinates
            // the part is located
            ctx.fillRect(snakePart.x, snakePart.y, BLOCK_SIZE, BLOCK_SIZE);
            // Draw a border around the snake part
            ctx.strokeRect(snakePart.x, snakePart.y, BLOCK_SIZE, BLOCK_SIZE);
        }
        /**
         * Changes the vertical and horizontal velocity of the snake according to the
         * key that was pressed.
         * The direction cannot be switched to the opposite direction, to prevent the snake
         * from reversing
         * For example if the the direction is 'right' it cannot become 'left'
         * @param { object } event - The keydown event
         */
        function changeDirection(event) {
            const LEFT_KEY = 37;
            const RIGHT_KEY = 39;
            const UP_KEY = 38;
            const DOWN_KEY = 40;
            /**
             * Prevent the snake from reversing
             * Example scenario:
             * Snake is moving to the right. User presses down and immediately left
             * and the snake immediately changes direction without taking a step down first
             */
            if (changingDirection) return;
            changingDirection = true;
            
            const keyPressed = event.keyCode;
            const goingUp = dy === -BLOCK_SIZE;
            const goingDown = dy === BLOCK_SIZE;
            const goingRight = dx === BLOCK_SIZE;
            const goingLeft = dx === -BLOCK_SIZE;
            if (keyPressed === LEFT_KEY && !goingRight) {
                dx = -BLOCK_SIZE;
                dy = 0;
            }
            
            if (keyPressed === UP_KEY && !goingDown) {
                dx = 0;
                dy = -BLOCK_SIZE;
            }
            
            if (keyPressed === RIGHT_KEY && !goingLeft) {
                dx = BLOCK_SIZE;
                dy = 0;
            }
            
            if (keyPressed === DOWN_KEY && !goingUp) {
                dx = 0;
                dy = BLOCK_SIZE;
            }
        }
        }(),
    function() {
        var e, t, a, n, r, o, s, c, l = "tetris",
            i = "#36393F",
            d = "#DCDDDE",
            m = "#303136",
            u = 14,
            h = 20,
            f = [],
            g = !1,
            p = [
                [0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0]
            ],
            v = [
                [
                    [0, 1],
                    [0, 1],
                    [0, 1],
                    [0, 1]
                ],
                [
                    [1, 1],
                    [0, 1],
                    [0, 1],
                    [0, 0]
                ],
                [
                    [1, 1],
                    [1, 0],
                    [1, 0],
                    [0, 0]
                ],
                [
                    [0, 0],
                    [1, 1],
                    [1, 1],
                    [0, 0]
                ],
                [
                    [0, 1],
                    [1, 1],
                    [1, 0],
                    [0, 0]
                ],
                [
                    [1, 0],
                    [1, 1],
                    [0, 1],
                    [0, 0]
                ],
                [
                    [1, 0],
                    [1, 1],
                    [1, 0],
                    [0, 0]
                ]
            ],
            k = 0,
            b = [],
            T = !0,
            w = 30,
            y = 1e3;

        function E(e) {
            null == e ? (0 == b.length && (b = Y([0, 1, 2, 3, 4, 5, 6])), c = b[b.length - 1], b.pop()) : c = e;
            var t = p[c];
            a = [];
            for (var s = 0; s < 4; ++s) {
                a[s] = [];
                for (var l = 0; l < 4; ++l) {
                    var i = 4 * s + l;
                    void 0 !== t[i] && t[i] ? a[s][l] = c + 1 : a[s][l] = 0
                }
            }
            o = !1, n = 5, r = 0
        }

        function S() {
            for (var e = 0; e < h; ++e) {
                f[e] = [];
                for (var t = 0; t < u; ++t) f[e][t] = 0
            }
            k = 0, s = void 0, c = void 0, T = !0, E()
        }

        function x() {
            if ("#tetris" == $('a[data-toggle="tab"].active').attr("href")) {
                if (C(0, 1)) ++r;
                else {
                    if (function() {
                            for (var e = 0; e < 4; ++e)
                                for (var t = 0; t < 4; ++t) a[e][t] && (f[e + r][t + n] = a[e][t]);
                            o = !0
                        }(), C(0, 1), function() {
                            for (var e = 0, t = h - 1; t >= 0; --t) {
                                for (var a = !0, n = 0; n < u; ++n)
                                    if (0 == f[t][n]) {
                                        a = !1;
                                        break
                                    } if (a) {
                                    e++;
                                    for (var r = t; r > 0; --r)
                                        for (var n = 0; n < u; ++n) f[r][n] = f[r - 1][n];
                                    ++t
                                }
                            }
                            if (0 == e) return;
                            1 == e ? k += 30 : 2 == e ? k += 100 : 3 == e ? k += 300 : 4 == e && (k += 1200)
                        }(), g) return chrome.storage.local.set({
                        tetrisGameBoard: void 0
                    }), M(), setTimeout(G, 30), !1;
                    E(), T = !0
                }
                chrome.storage.local.set({
                    tetrisGameBoard: {
                        board: f,
                        score: k,
                        currentX: n,
                        currentY: r,
                        current: a,
                        heldShapeId: s,
                        currentId: c,
                        canHoldShape: T
                    }
                })
            }
        }

        function C(e, t, s) {
            e = n + (e = e || 0), t = r + (t = t || 0), s = s || a;
            for (var c = 0; c < 4; ++c)
                for (var l = 0; l < 4; ++l)
                    if (s[c][l] && (void 0 === f[c + t] || void 0 === f[c + t][l + e] || f[c + t][l + e] || l + e < 0 || c + t >= h || l + e >= u)) return 1 == t && o && (g = !0), !1;
            return !0
        }

        function I() {
            document.addEventListener("keydown", B), M(), t = setInterval(P, w), e = setInterval(x, y)
        }

        function M() {
            clearInterval(e), clearInterval(t)
        }

        function B(e) {
            if ("#tetris" != $('a[data-toggle="tab"].active').attr("href")) return document.removeEventListener("keydown", B), void document.removeEventListener("keydown", q);
            var t = {
                37: "left",
                39: "right",
                40: "down",
                38: "rotate",
                32: "drop",
                16: "hold"
            };
            void 0 !== t[e.keyCode] && (! function(e) {
                switch (e) {
                    case "left":
                        C(-1) && --n;
                        break;
                    case "right":
                        C(1) && ++n;
                        break;
                    case "down":
                        C(0, 1) && ++r;
                        break;
                    case "rotate":
                        var t = function(e) {
                            for (var t = [], a = 0; a < 4; ++a) {
                                t[a] = [];
                                for (var n = 0; n < 4; ++n) t[a][n] = e[3 - n][a]
                            }
                            return t
                        }(a);
                        C(0, 0, t) && (a = t);
                        break;
                    case "drop":
                        for (; C(0, 1);) ++r;
                        x();
                        break;
                    case "hold":
                        if (T) {
                            var o = c;
                            E(s), s = o, T = !1
                        }
                }
            }(t[e.keyCode]), P())
        }
        window.openTetrisTab = function() {
            chrome.storage.local.get(["theme"], function(e) {
                if ("light" === e.theme) i = "#FFFFFF", d = "#000000", "#495057", m = "#CED4DA", "#CED4DA", "#3B97E0";
                else if ("dark" === e.theme) i = "#36393F", d = "#DCDDDE", "#72767E", m = "#303136", "#303136", "#3B97E0";
                else if (null != e.theme) {
                    var t = e.theme;
                    chrome.storage.local.get(["customThemes"], function(e) {
                        var a = t + "-customTheme";
                        i = e.customThemes[a].theme1, d = e.customThemes[a].theme2, e.customThemes[a].theme3, m = e.customThemes[a].theme4, e.customThemes[a].theme5, e.customThemes[a].theme6
                    })
                }
                chrome.storage.local.get(["tetrisGameBoard"], function(e) {
                    0 != Object.keys(e).length && 0 != Object.keys(e.tetrisGameBoard).length ? (f = e.tetrisGameBoard.board, k = e.tetrisGameBoard.score, n = e.tetrisGameBoard.currentX, r = e.tetrisGameBoard.currentY, a = e.tetrisGameBoard.current, s = e.tetrisGameBoard.heldShapeId, c = e.tetrisGameBoard.currentId, T = e.tetrisGameBoard.canHoldShape, void 0 == f || void 0 == k ? (f = e.tetrisGameBoard[0], k = e.tetrisGameBoard[1], E()) : void 0 == a && E()) : S(), I(), document.addEventListener("keydown", q)
                })
            })
        };
        var L = document.getElementById("tetrisCanvas").getContext("2d"),
            O = 350,
            H = 500,
            R = O / u,
            A = H / h,
            D = 16,
            U = 16;

        function F(e, t) {
            L.fillRect(R * e, A * t, R, A), L.strokeRect(R * e, A * t, R, A)
        }

        function V(e, t, a, n) {
            L.fillRect(D * e + a, D * t + n, D, D), L.strokeRect(U * e + a, U * t + n, U, U)
        }

        function N(e, t) {
            L.strokeRect(R * e + 2, A * t + 2, R - 4, A - 4)
        }

        function P() {
            L.clearRect(0, 0, O, H), L.strokeStyle = i;
            for (var e = 0; e < u; ++e)
                for (var t = 0; t < h; ++t) f[t][e] && (L.fillStyle = j(f[t][e] - 1), F(e, t));
            for (L.strokeStyle = d, L.lineWidth = .5, yValid = 0; C(0, yValid);) ++yValid;
            for (t = 0; t < 4; ++t)
                for (e = 0; e < 4; ++e) a[t][e] && N(n + e, r + t + yValid - 1);
            L.strokeStyle = i, L.lineWidth = 2;
            for (t = 0; t < 4; ++t)
                for (e = 0; e < 4; ++e) a[t][e] && (L.fillStyle = j(a[t][e] - 1), F(n + e, r + t));
            L.fillStyle = d, L.font = "Bold 15px Verdana", L.textAlign = "right", L.textBaseline = "bottom", L.fillText("Score: " + k, 350, 15), L.fillStyle = d, L.font = "Bold 10px Verdana", L.textAlign = "center", L.textBaseline = "top", L.fillText("HOLD", 20, 1);
            var o = v[s];
            if (null != o) {
                L.strokeStyle = i, L.lineWidth = 2;
                for (t = 0; t < 4; ++t)
                    for (e = 0; e < 2; ++e) o[t][e] && V(e, t, 4, 14)
            }
            L.fillText("NEXT", 60, 1), 0 == b.length && (b = Y([0, 1, 2, 3, 4, 5, 6]));
            var c = b[b.length - 1],
                l = v[c];
            L.strokeStyle = i, L.lineWidth = 2;
            for (t = 0; t < 4; ++t)
                for (e = 0; e < 2; ++e) l[t][e] && V(e, t, 44, 14)
        }

        function G() {
            g = !1, document.removeEventListener("keydown", B), L.globalAlpha = .75, L.fillStyle = i, L.fillRect(0, 0, O, H), L.globalAlpha = 1, chrome.storage.local.get(["gameHighScore"], function(e) {
                if (L.fillStyle = d, L.textAlign = "center", 0 === Object.keys(e).length) chrome.storage.local.set({
                    gameHighScore: {
                        2048: k
                    }
                }), L.font = "20px Verdana", L.fillText("Score: " + k, 175, 130), gameHighScore(l, k);
                else if (e.gameHighScore.hasOwnProperty(l))
                    if (e.gameHighScore[l] < k) {
                        var t = e.gameHighScore;
                        t[l] = k, chrome.storage.local.set({
                            gameHighScore: t
                        }), gameHighScore(l, k), L.font = "20px Verdana", L.fillText("New High Score!: " + k, 175, 130)
                    } else {
                        a = e.gameHighScore[l];
                        L.font = "20px Verdana", L.fillText("Score: " + k, 175, 130), L.font = "14px Verdana", L.fillText("Highscore: " + a, 175, 152), gameHighScore(l, a)
                    }
                else {
                    var a;
                    (a = e.gameHighScore)[l] = k, chrome.storage.local.set({
                        gameHighScore: a
                    }), L.font = "20px Verdana", L.fillText("Score: " + k, 175, 130), gameHighScore(l, k)
                }
                L.font = "14px Verdana", L.fillText("Press R To Restart", 175, 190), L.fillText("Press Enter To View Leaderboard", 175, 206)
            })
        }

        function q(e) {
            "#tetris" == $('a[data-toggle="tab"].active').attr("href") ? (82 == e.keyCode && (S(), I()), "Enter" === e.code && getGameHighScores(l)) : document.removeEventListener("keydown", q)
        }

        function j(e) {
            return function(e, t) {
                c1 = m;
                var a = parseInt(e.slice(1), 16),
                    n = parseInt(c1.slice(1), 16),
                    r = a >> 16,
                    o = a >> 8 & 255,
                    s = 255 & a,
                    c = n >> 16,
                    l = n >> 8 & 255,
                    i = 255 & n;
                return "#" + (16777216 + 65536 * (Math.round((c - r) * t) + r) + 256 * (Math.round((l - o) * t) + o) + (Math.round((i - s) * t) + s)).toString(16).slice(1)
            }(d, e / 12)
        }

        function Y(e) {
            for (var t, a, n = e.length; 0 !== n;) a = Math.floor(Math.random() * n), t = e[n -= 1], e[n] = e[a], e[a] = t;
            return e
        }
    }();